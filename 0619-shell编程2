1.线性的文本处理工具
	可以在文本数据进行字段分割和重组
	默认是以空格或者连续空格作为分割符号
	a.获取本机的IP地址
		ifconfig eth0 |grep Bcast | awk -F " " '{ print $2}' |awk -F ":" '{ print $2}'
	b.打印所有行
		awk '{ print }' /etc/passwd
	c.打印第一列
		查看系统中有哪些用户
		awk -F ":" '{ print $1 }' /etc/passwd
	d.打印多列
		awk -F ":" '{ print $1,$3 }' /etc/passwd
		awk -F ":" '{ print $1":"$3 }' /etc/passwd
	e.把所有通过ssh登录失败的IP打印出来
		lastb -ai | grep ssh |awk  '{print $10}' |uniq -c
		lastb -i   登录失败信息
		uniq -c    去重计算数量
	f.打印每行的最后一列
		$NF   最后一列
		awk -F ":" '{ print $NF }' /etc/passwd
		/bin/bash               用户可以登录系统进行操作
		/sbin/nologin           用户可以在系统中运行程序，但是不能登录系统
	g.打印每行的字段数(每行多少个列)
		NF    列的数量
		 awk -F ":" '{ print NF }' passwd
	h.运算操作符号
		+
		-
		*
		/
		%
		^
		++
		--
		echo  |awk '{ print 2^3}'
	i.awk的关系操作符
		==
		!=
		>=
		<=
		>
		<
	j.逻辑操作符
		&&   逻辑与
		||   逻辑或
		！   逻辑非
	k.打印行号
		awk -F ":" '{ print NR,$1}' /etc/passwd
		awk -F ":" 'NR==8{print}' passwd
		简单的条件判断
		NR代表行号
		虽然打印的是第八行，但是前7行，awk一样读取，只是没有打印
	l.打印字段数量大于3的行
		必须要加分割符号，列数才有意义
		awk -F ":" 'NF>3{print}' passwd
	m.打印uid在10和20之间的用户名
		awk -F ":" '$3>=10&&$3<=20{print}' passwd
	n.隔行删除(隔行打印)
		awk 'NR%2==0{print }' passwd
	o.练习
		a.终端设置(.bashrc)
		1.当前用户为  	xxx
		2.当前IP为   	xxx
		3.当前主机名为 	xxx
			
		b.系统情况报告
		1.cpu用户使用率超过80%(vmstat us对应数据)
		2.内存使用率超过80%(free)
			内存总量
				free |grep Mem |awk -F " " '{ print $2}'
			已用数量
				free |grep Mem |awk -F " " '{ print $3}'
			内存使用率
				echo "scale=2;$b/$a" |bc |awk -F "." '{ print $2}'
		3.硬盘使用率超过80%(df)
			df -h | grep /$ |awk -F " " '{ print $4}'|awk -F "%" '{print $1}'

		4.超过极限在所有终端报警(wall)
			wall 群发信息给当前登录的所有用户
	p.awk进阶
		awk -F ":" 'BEGIN{处理文件前的代码块}{处理文件过程中的代码块}END{处理文件后执行的代码块}'
		1.输出内容顶部增加 come on ，输出最后增加 get out
			awk -F ":" 'BEGIN{ print "come on "}{ print }END{print "get out"}' passwd
		2.打印最后一行的最后一列
			awk -F ":" 'END{ print $NF}' passwd
		3.打印文件字段总和
			awk -F ":" 'BEGIN{count=0}{count+=NF}END{print count } ' passwd
		4.打印字段数大于4的总行数
			 awk -F ":" 'BEGIN{count=0}NF>4{ count++ }END{ print count }' passwd
		5.awk代码写入到独立的文件中
			01.awk
			BEGIN{
			        FS=":"
			        count=0
			}
			{
			        if( NF>4 )
			        {
			                count++
			        }
			}
			END{
			        print count
			}
			awk -f 01.awk passwd
		6.awk函数调用
			awk有很多内置函数
				print("参数")  打印完毕后自动换行
				printf(参数列表) 格式化，定义格式，转义等等
				printf("%d--%s\n",12,'heygor')
				echo  |awk '{ printf("%d--%s",100,'hey')}
		7.awk的循环
			for (i=0;i<10;i++)
			{
				printf("%d",i)
			}
			02.awk
			{
			for(i=0;i<10;i++)
			{
			        printf("%d",i)
			}
			}
			END{
			        print "over"
			}
			echo |awk -f 02.awk
		8.倒序排列所有字段
			test.txt
			1:2:3:4
			a:b:c:d:e
			处理后
			4:3:2:1
			e:d:c:b:a
			03.awk
			BEGIN{
			        FS=":"
			}
			{
			        for(i=NF;i>0;i--)
			        {
			                if( i>1 )
			                {
			                        printf("%s:",$i)
			                }
			                else{
			                        printf("%s\n",$i)
			                }
			        }
			}
			awk -f 03.awk ./test.txt









